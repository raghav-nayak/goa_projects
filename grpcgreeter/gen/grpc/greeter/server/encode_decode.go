// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greeter gRPC server encoders and decoders
//
// Command:
// $ goa gen grpcgreeter/design

package server

import (
	"context"
	greeter "grpcgreeter/gen/greeter"
	greeterpb "grpcgreeter/gen/grpc/greeter/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeSayHelloResponse encodes responses from the "greeter" service
// "SayHello" endpoint.
func EncodeSayHelloResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*greeter.SayHelloResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greeter", "SayHello", "*greeter.SayHelloResult", v)
	}
	resp := NewProtoSayHelloResponse(result)
	return resp, nil
}

// DecodeSayHelloRequest decodes requests sent to "greeter" service "SayHello"
// endpoint.
func DecodeSayHelloRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *greeterpb.SayHelloRequest
		ok      bool
	)
	{
		if message, ok = v.(*greeterpb.SayHelloRequest); !ok {
			return nil, goagrpc.ErrInvalidType("greeter", "SayHello", "*greeterpb.SayHelloRequest", v)
		}
		if err := ValidateSayHelloRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *greeter.SayHelloPayload
	{
		payload = NewSayHelloPayload(message)
	}
	return payload, nil
}
