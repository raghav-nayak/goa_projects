// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greeter gRPC client CLI support package
//
// Command:
// $ goa gen grpcgreeter/design

package cli

import (
	"flag"
	"fmt"
	greeterc "grpcgreeter/gen/grpc/greeter/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `greeter say-hello
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` greeter say-hello --message '{
      "name": "Amex"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		greeterFlags = flag.NewFlagSet("greeter", flag.ContinueOnError)

		greeterSayHelloFlags       = flag.NewFlagSet("say-hello", flag.ExitOnError)
		greeterSayHelloMessageFlag = greeterSayHelloFlags.String("message", "", "")
	)
	greeterFlags.Usage = greeterUsage
	greeterSayHelloFlags.Usage = greeterSayHelloUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "greeter":
			svcf = greeterFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "greeter":
			switch epn {
			case "say-hello":
				epf = greeterSayHelloFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "greeter":
			c := greeterc.NewClient(cc, opts...)
			switch epn {
			case "say-hello":
				endpoint = c.SayHello()
				data, err = greeterc.BuildSayHelloPayload(*greeterSayHelloMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// greeterUsage displays the usage of the greeter command and its subcommands.
func greeterUsage() {
	fmt.Fprintf(os.Stderr, `A simple gRPC service that says hello.
Usage:
    %[1]s [globalflags] greeter COMMAND [flags]

COMMAND:
    say-hello: Send a greeting to a user

Additional help:
    %[1]s greeter COMMAND --help
`, os.Args[0])
}
func greeterSayHelloUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] greeter say-hello -message JSON

Send a greeting to a user
    -message JSON: 

Example:
    %[1]s greeter say-hello --message '{
      "name": "Amex"
   }'
`, os.Args[0])
}
